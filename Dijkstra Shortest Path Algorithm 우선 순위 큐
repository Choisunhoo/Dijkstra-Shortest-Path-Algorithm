# Dijkstra Shortest Path Algorithm 다익스트라 최단 경로 알고리즘 우선 순위 큐
# 특정 노드에서 출발하여 다른 모든 노드로 가는 최단 경로를 계산하는 알고리즘

import heapq
import sys 
input = sys.stdin.readline
# 무한을 의미하는 값으로 10억을 설정해줌
INF = 1e9

# 노드의 개수와 간선의 개수를 입력받음
n, m = map(int, input().split())
# 시작 노드 번호를 입력 받음 
start = int(input())
# 각노드에 연결 되어 있는 노드에 대한 정보를 담는 리스트를 만들어줌
graph = [[] for i in range(n+1)]
# 방문여부를 체크하는 목적의 리스트를 만들어줌
visited = [False] * (n+1)
# 최단 거리 테이블을 모두 무한으로 초기화
distance = [INF] * (n+1)

# 모든 간선의 정보를 입력 받기 
for _ in range(m):
    a, b, c = map(int, input().split())
    # a번 노드에서 b번 노드로 가는 비용이 c라는 의미
    graph[a].append((b, c))


# 다익스트라 알고리즘 시작
def dijkstra(start):
    # 큐 생성
    q = []
    # 시작 노드로 가기 위한 최단 거리는 0으로 설정하여, 큐에 삽입
    heapq.heappush(q, (0, start))
    distance[start] = 0 
    # 큐가 비여있지 않다면
    while q: 
        # 가장 최단 거리가 짧은 노드에 대한 정보를 꺼내기
        dist, now = heapq.heappop(q)
        # 현재 노드에 저장된 거리가 지금 비교할 노드에 가는 거리보다 작은경우 (더이상 거리가 변하지 않는 경우) 무시
        if distance[now] < dist: 
            continue
        # 현재 노드와 연결된 다른 노드를 비교
        for i in graph[now]:
            # 다른 노드로 가는 값은 현재 노드까지의 거리 + 현재 노드에서 다른 노드로 가는거리 
            cost = dist + i[1]
            # 위에서 언급한 거리가 지금 입력되어잇는 거리보다 작은경우 갱신
            if cost < distance[i[0]]:
                distance[i[0]] = cost
                # 그 노드에서 다른 노드로 가는 길을 찾기 위해 힙에 거리와 인덱스를 넣어줌
                heapq.heappush(q, (cost, i[0]))
# 다익스트라 알고리즘을 수행
dijkstra(start)

# 모든 노드로 가기 위한 최단 거리를 출력
for i in range(1, n+1):
    # 도달할 수 없는 경우 최단거리의 초기값인 10억 임으로 이때는, 무한인 INFINITY 를 출력
    if distance[i] == INF:
        print("INFINITY")
    # 도달 가능한 경우 최단 거리를 출력
    else:
        print(distance[i])
