# Dijkstra Shortest Path Algorithm 다익스트라 최단 경로 알고리즘 간단한 구현 방법
# 특정 노드에서 출발하여 다른 모든 노드로 가는 최단 경로를 계산하는 알고리즘


import sys 
input = sys.stdin.readline
# 무한을 의미하는 값으로 10억을 설정해줌
INF = 1e9

# 노드의 개수와 간선의 개수를 입력받음
n, m = map(int, input().split())
# 시작 노드 번호를 입력 받음 
start = int(input())
# 각노드에 연결 되어 있는 노드에 대한 정보를 담는 리스트를 만들어줌
graph = [[] for i in range(n+1)]
# 방문여부를 체크하는 목적의 리스트를 만들어줌
visited = [False] * (n+1)
# 최단 거리 테이블을 모두 무한으로 초기화
distance = [INF] * (n+1)

# 모든 간선의 정보를 입력 받기 
for _ in range(m):
    a, b, c = map(int, input().split())
    # a번 노드에서 b번 노드로 가는 비용이 c라는 의미
    graph[a].append((b, c))

# 방문하지 않은 노드중에서 가장 최단거리가 짧은 노드의 번호를 반환
def get_smallest_node():
    # 최단거리를 무한으로 초기화
    min_value = INF
    # 인덱스를 초기화
    index = 0 
    # 거리가 제일 짧으면서 방문 하지 않는 곳의 인덱스와 거리를 저장 
    for i in range(1, n+1):
        if distance[i] < min_value and not visited[i]:
            min_vlaue = distance 
            index = i 
    # 인덱스를 반환
    return index

# 다익스트라 알고리즘 시작
def dijkstra(start):
    # 시작 노드에 대해서 초기화
    distance[start] = 0 
    # 시작 노드를 방문 했다고 체크
    visited[start] = True
    # 시작 노드에서 방문 할 수 있는 노드의 거리를 최단 거리 테이블에 입력
    for j in graph[start]:
        distance[j[0]] = j[1]

    # 시작 노드를 제외한 n-1 개의 노드에 대해서 반복
    for i in range(n-1):
        # 가장 최단 거리가 짧고 방문 하지 않은 노드를 now로 저장
        now = get_smallest_node() 
        # 가장 짧고 방문 하지 않은 노드를 방문으로 체크
        visited[now] = True
        # 현재 노드와 연결된 다른 노드를 
        for j in graph[now]:
            # 시작에서 현재 노드까지의 거리와 현재 노드에서 다른 노드 까지의 거리를 더한 값을 cost로 지정  
            cost = distance[now] + j[1]
            # 현재 노드를 거쳐서 다른 노드로 이동하는 값인 cost가 지금까지 저장된 최단 거리 테이블에 있는 거리보다 짧을 경우 변경
            if cost < distance[j[0]]:
                distance[j[0]] = cost

# 다익스트라 알고리즘을 수행
dijkstra(start)

# 모든 노드로 가기 위한 최단 거리를 출력
for i in range(1, n+1):
    # 도달할 수 없는 경우 최단거리의 초기값인 10억 임으로 이때는, 무한인 INFINITY 를 출력
    if distance[i] == INF:
        print("INFINITY")
    # 도달 가능한 경우 최단 거리를 출력
    else:
        print(distance[i])
